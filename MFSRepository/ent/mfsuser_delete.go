// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fukunokaze/mfs_backend/MFSRepository/ent/mfsuser"
	"github.com/fukunokaze/mfs_backend/MFSRepository/ent/predicate"
)

// MFSUserDelete is the builder for deleting a MFSUser entity.
type MFSUserDelete struct {
	config
	hooks    []Hook
	mutation *MFSUserMutation
}

// Where appends a list predicates to the MFSUserDelete builder.
func (mud *MFSUserDelete) Where(ps ...predicate.MFSUser) *MFSUserDelete {
	mud.mutation.Where(ps...)
	return mud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mud *MFSUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MFSUserMutation](ctx, mud.sqlExec, mud.mutation, mud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mud *MFSUserDelete) ExecX(ctx context.Context) int {
	n, err := mud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mud *MFSUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(mfsuser.Table, sqlgraph.NewFieldSpec(mfsuser.FieldID, field.TypeInt))
	if ps := mud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mud.mutation.done = true
	return affected, err
}

// MFSUserDeleteOne is the builder for deleting a single MFSUser entity.
type MFSUserDeleteOne struct {
	mud *MFSUserDelete
}

// Where appends a list predicates to the MFSUserDelete builder.
func (mudo *MFSUserDeleteOne) Where(ps ...predicate.MFSUser) *MFSUserDeleteOne {
	mudo.mud.mutation.Where(ps...)
	return mudo
}

// Exec executes the deletion query.
func (mudo *MFSUserDeleteOne) Exec(ctx context.Context) error {
	n, err := mudo.mud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mfsuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mudo *MFSUserDeleteOne) ExecX(ctx context.Context) {
	if err := mudo.Exec(ctx); err != nil {
		panic(err)
	}
}
