// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fukunokaze/mfs_backend/MFSRepository/ent/mfsuser"
)

// MFSUserCreate is the builder for creating a MFSUser entity.
type MFSUserCreate struct {
	config
	mutation *MFSUserMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (muc *MFSUserCreate) SetUserId(i int) *MFSUserCreate {
	muc.mutation.SetUserId(i)
	return muc
}

// SetUsername sets the "username" field.
func (muc *MFSUserCreate) SetUsername(s string) *MFSUserCreate {
	muc.mutation.SetUsername(s)
	return muc
}

// SetPassword sets the "password" field.
func (muc *MFSUserCreate) SetPassword(s string) *MFSUserCreate {
	muc.mutation.SetPassword(s)
	return muc
}

// SetAddress sets the "address" field.
func (muc *MFSUserCreate) SetAddress(s string) *MFSUserCreate {
	muc.mutation.SetAddress(s)
	return muc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (muc *MFSUserCreate) SetNillableAddress(s *string) *MFSUserCreate {
	if s != nil {
		muc.SetAddress(*s)
	}
	return muc
}

// Mutation returns the MFSUserMutation object of the builder.
func (muc *MFSUserCreate) Mutation() *MFSUserMutation {
	return muc.mutation
}

// Save creates the MFSUser in the database.
func (muc *MFSUserCreate) Save(ctx context.Context) (*MFSUser, error) {
	return withHooks[*MFSUser, MFSUserMutation](ctx, muc.sqlSave, muc.mutation, muc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (muc *MFSUserCreate) SaveX(ctx context.Context) *MFSUser {
	v, err := muc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (muc *MFSUserCreate) Exec(ctx context.Context) error {
	_, err := muc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muc *MFSUserCreate) ExecX(ctx context.Context) {
	if err := muc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muc *MFSUserCreate) check() error {
	if _, ok := muc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "MFSUser.userId"`)}
	}
	if _, ok := muc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "MFSUser.username"`)}
	}
	if _, ok := muc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "MFSUser.password"`)}
	}
	return nil
}

func (muc *MFSUserCreate) sqlSave(ctx context.Context) (*MFSUser, error) {
	if err := muc.check(); err != nil {
		return nil, err
	}
	_node, _spec := muc.createSpec()
	if err := sqlgraph.CreateNode(ctx, muc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	muc.mutation.id = &_node.ID
	muc.mutation.done = true
	return _node, nil
}

func (muc *MFSUserCreate) createSpec() (*MFSUser, *sqlgraph.CreateSpec) {
	var (
		_node = &MFSUser{config: muc.config}
		_spec = sqlgraph.NewCreateSpec(mfsuser.Table, sqlgraph.NewFieldSpec(mfsuser.FieldID, field.TypeInt))
	)
	if value, ok := muc.mutation.UserId(); ok {
		_spec.SetField(mfsuser.FieldUserId, field.TypeInt, value)
		_node.UserId = value
	}
	if value, ok := muc.mutation.Username(); ok {
		_spec.SetField(mfsuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := muc.mutation.Password(); ok {
		_spec.SetField(mfsuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := muc.mutation.Address(); ok {
		_spec.SetField(mfsuser.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	return _node, _spec
}

// MFSUserCreateBulk is the builder for creating many MFSUser entities in bulk.
type MFSUserCreateBulk struct {
	config
	builders []*MFSUserCreate
}

// Save creates the MFSUser entities in the database.
func (mucb *MFSUserCreateBulk) Save(ctx context.Context) ([]*MFSUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mucb.builders))
	nodes := make([]*MFSUser, len(mucb.builders))
	mutators := make([]Mutator, len(mucb.builders))
	for i := range mucb.builders {
		func(i int, root context.Context) {
			builder := mucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MFSUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mucb *MFSUserCreateBulk) SaveX(ctx context.Context) []*MFSUser {
	v, err := mucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mucb *MFSUserCreateBulk) Exec(ctx context.Context) error {
	_, err := mucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mucb *MFSUserCreateBulk) ExecX(ctx context.Context) {
	if err := mucb.Exec(ctx); err != nil {
		panic(err)
	}
}
