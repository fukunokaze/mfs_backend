// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fukunokaze/mfs_backend/MFSRepository/ent/mfsuser"
	"github.com/fukunokaze/mfs_backend/MFSRepository/ent/predicate"
)

// MFSUserUpdate is the builder for updating MFSUser entities.
type MFSUserUpdate struct {
	config
	hooks    []Hook
	mutation *MFSUserMutation
}

// Where appends a list predicates to the MFSUserUpdate builder.
func (muu *MFSUserUpdate) Where(ps ...predicate.MFSUser) *MFSUserUpdate {
	muu.mutation.Where(ps...)
	return muu
}

// SetUserId sets the "userId" field.
func (muu *MFSUserUpdate) SetUserId(i int) *MFSUserUpdate {
	muu.mutation.ResetUserId()
	muu.mutation.SetUserId(i)
	return muu
}

// AddUserId adds i to the "userId" field.
func (muu *MFSUserUpdate) AddUserId(i int) *MFSUserUpdate {
	muu.mutation.AddUserId(i)
	return muu
}

// SetUsername sets the "username" field.
func (muu *MFSUserUpdate) SetUsername(s string) *MFSUserUpdate {
	muu.mutation.SetUsername(s)
	return muu
}

// SetPassword sets the "password" field.
func (muu *MFSUserUpdate) SetPassword(s string) *MFSUserUpdate {
	muu.mutation.SetPassword(s)
	return muu
}

// SetAddress sets the "address" field.
func (muu *MFSUserUpdate) SetAddress(s string) *MFSUserUpdate {
	muu.mutation.SetAddress(s)
	return muu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (muu *MFSUserUpdate) SetNillableAddress(s *string) *MFSUserUpdate {
	if s != nil {
		muu.SetAddress(*s)
	}
	return muu
}

// ClearAddress clears the value of the "address" field.
func (muu *MFSUserUpdate) ClearAddress() *MFSUserUpdate {
	muu.mutation.ClearAddress()
	return muu
}

// Mutation returns the MFSUserMutation object of the builder.
func (muu *MFSUserUpdate) Mutation() *MFSUserMutation {
	return muu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (muu *MFSUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MFSUserMutation](ctx, muu.sqlSave, muu.mutation, muu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muu *MFSUserUpdate) SaveX(ctx context.Context) int {
	affected, err := muu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (muu *MFSUserUpdate) Exec(ctx context.Context) error {
	_, err := muu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muu *MFSUserUpdate) ExecX(ctx context.Context) {
	if err := muu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muu *MFSUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mfsuser.Table, mfsuser.Columns, sqlgraph.NewFieldSpec(mfsuser.FieldID, field.TypeInt))
	if ps := muu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muu.mutation.UserId(); ok {
		_spec.SetField(mfsuser.FieldUserId, field.TypeInt, value)
	}
	if value, ok := muu.mutation.AddedUserId(); ok {
		_spec.AddField(mfsuser.FieldUserId, field.TypeInt, value)
	}
	if value, ok := muu.mutation.Username(); ok {
		_spec.SetField(mfsuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := muu.mutation.Password(); ok {
		_spec.SetField(mfsuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := muu.mutation.Address(); ok {
		_spec.SetField(mfsuser.FieldAddress, field.TypeString, value)
	}
	if muu.mutation.AddressCleared() {
		_spec.ClearField(mfsuser.FieldAddress, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, muu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mfsuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	muu.mutation.done = true
	return n, nil
}

// MFSUserUpdateOne is the builder for updating a single MFSUser entity.
type MFSUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MFSUserMutation
}

// SetUserId sets the "userId" field.
func (muuo *MFSUserUpdateOne) SetUserId(i int) *MFSUserUpdateOne {
	muuo.mutation.ResetUserId()
	muuo.mutation.SetUserId(i)
	return muuo
}

// AddUserId adds i to the "userId" field.
func (muuo *MFSUserUpdateOne) AddUserId(i int) *MFSUserUpdateOne {
	muuo.mutation.AddUserId(i)
	return muuo
}

// SetUsername sets the "username" field.
func (muuo *MFSUserUpdateOne) SetUsername(s string) *MFSUserUpdateOne {
	muuo.mutation.SetUsername(s)
	return muuo
}

// SetPassword sets the "password" field.
func (muuo *MFSUserUpdateOne) SetPassword(s string) *MFSUserUpdateOne {
	muuo.mutation.SetPassword(s)
	return muuo
}

// SetAddress sets the "address" field.
func (muuo *MFSUserUpdateOne) SetAddress(s string) *MFSUserUpdateOne {
	muuo.mutation.SetAddress(s)
	return muuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (muuo *MFSUserUpdateOne) SetNillableAddress(s *string) *MFSUserUpdateOne {
	if s != nil {
		muuo.SetAddress(*s)
	}
	return muuo
}

// ClearAddress clears the value of the "address" field.
func (muuo *MFSUserUpdateOne) ClearAddress() *MFSUserUpdateOne {
	muuo.mutation.ClearAddress()
	return muuo
}

// Mutation returns the MFSUserMutation object of the builder.
func (muuo *MFSUserUpdateOne) Mutation() *MFSUserMutation {
	return muuo.mutation
}

// Where appends a list predicates to the MFSUserUpdate builder.
func (muuo *MFSUserUpdateOne) Where(ps ...predicate.MFSUser) *MFSUserUpdateOne {
	muuo.mutation.Where(ps...)
	return muuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muuo *MFSUserUpdateOne) Select(field string, fields ...string) *MFSUserUpdateOne {
	muuo.fields = append([]string{field}, fields...)
	return muuo
}

// Save executes the query and returns the updated MFSUser entity.
func (muuo *MFSUserUpdateOne) Save(ctx context.Context) (*MFSUser, error) {
	return withHooks[*MFSUser, MFSUserMutation](ctx, muuo.sqlSave, muuo.mutation, muuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muuo *MFSUserUpdateOne) SaveX(ctx context.Context) *MFSUser {
	node, err := muuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muuo *MFSUserUpdateOne) Exec(ctx context.Context) error {
	_, err := muuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muuo *MFSUserUpdateOne) ExecX(ctx context.Context) {
	if err := muuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muuo *MFSUserUpdateOne) sqlSave(ctx context.Context) (_node *MFSUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(mfsuser.Table, mfsuser.Columns, sqlgraph.NewFieldSpec(mfsuser.FieldID, field.TypeInt))
	id, ok := muuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MFSUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mfsuser.FieldID)
		for _, f := range fields {
			if !mfsuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mfsuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muuo.mutation.UserId(); ok {
		_spec.SetField(mfsuser.FieldUserId, field.TypeInt, value)
	}
	if value, ok := muuo.mutation.AddedUserId(); ok {
		_spec.AddField(mfsuser.FieldUserId, field.TypeInt, value)
	}
	if value, ok := muuo.mutation.Username(); ok {
		_spec.SetField(mfsuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := muuo.mutation.Password(); ok {
		_spec.SetField(mfsuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := muuo.mutation.Address(); ok {
		_spec.SetField(mfsuser.FieldAddress, field.TypeString, value)
	}
	if muuo.mutation.AddressCleared() {
		_spec.ClearField(mfsuser.FieldAddress, field.TypeString)
	}
	_node = &MFSUser{config: muuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mfsuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muuo.mutation.done = true
	return _node, nil
}
