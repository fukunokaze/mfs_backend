// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ItemMaster.proto

package itemmasterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemMasterServiceClient is the client API for ItemMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemMasterServiceClient interface {
	CreateItemMaster(ctx context.Context, in *CreateItemMasterRequest, opts ...grpc.CallOption) (*CreateItemMasterResponse, error)
	GetAllItemMaster(ctx context.Context, in *GetAllItemMasterRequest, opts ...grpc.CallOption) (*GetAllItemMasterResponse, error)
}

type itemMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemMasterServiceClient(cc grpc.ClientConnInterface) ItemMasterServiceClient {
	return &itemMasterServiceClient{cc}
}

func (c *itemMasterServiceClient) CreateItemMaster(ctx context.Context, in *CreateItemMasterRequest, opts ...grpc.CallOption) (*CreateItemMasterResponse, error) {
	out := new(CreateItemMasterResponse)
	err := c.cc.Invoke(ctx, "/itemmaster.ItemMasterService/CreateItemMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemMasterServiceClient) GetAllItemMaster(ctx context.Context, in *GetAllItemMasterRequest, opts ...grpc.CallOption) (*GetAllItemMasterResponse, error) {
	out := new(GetAllItemMasterResponse)
	err := c.cc.Invoke(ctx, "/itemmaster.ItemMasterService/GetAllItemMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemMasterServiceServer is the server API for ItemMasterService service.
// All implementations must embed UnimplementedItemMasterServiceServer
// for forward compatibility
type ItemMasterServiceServer interface {
	CreateItemMaster(context.Context, *CreateItemMasterRequest) (*CreateItemMasterResponse, error)
	GetAllItemMaster(context.Context, *GetAllItemMasterRequest) (*GetAllItemMasterResponse, error)
	mustEmbedUnimplementedItemMasterServiceServer()
}

// UnimplementedItemMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemMasterServiceServer struct {
}

func (UnimplementedItemMasterServiceServer) CreateItemMaster(context.Context, *CreateItemMasterRequest) (*CreateItemMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemMaster not implemented")
}
func (UnimplementedItemMasterServiceServer) GetAllItemMaster(context.Context, *GetAllItemMasterRequest) (*GetAllItemMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemMaster not implemented")
}
func (UnimplementedItemMasterServiceServer) mustEmbedUnimplementedItemMasterServiceServer() {}

// UnsafeItemMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemMasterServiceServer will
// result in compilation errors.
type UnsafeItemMasterServiceServer interface {
	mustEmbedUnimplementedItemMasterServiceServer()
}

func RegisterItemMasterServiceServer(s grpc.ServiceRegistrar, srv ItemMasterServiceServer) {
	s.RegisterService(&ItemMasterService_ServiceDesc, srv)
}

func _ItemMasterService_CreateItemMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemMasterServiceServer).CreateItemMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemmaster.ItemMasterService/CreateItemMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemMasterServiceServer).CreateItemMaster(ctx, req.(*CreateItemMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemMasterService_GetAllItemMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemMasterServiceServer).GetAllItemMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itemmaster.ItemMasterService/GetAllItemMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemMasterServiceServer).GetAllItemMaster(ctx, req.(*GetAllItemMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemMasterService_ServiceDesc is the grpc.ServiceDesc for ItemMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "itemmaster.ItemMasterService",
	HandlerType: (*ItemMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItemMaster",
			Handler:    _ItemMasterService_CreateItemMaster_Handler,
		},
		{
			MethodName: "GetAllItemMaster",
			Handler:    _ItemMasterService_GetAllItemMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ItemMaster.proto",
}
